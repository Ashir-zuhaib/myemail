<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Email List</title>
  <link rel="stylesheet" href="style.css">
  <style>
    body {
      font-family: sans-serif;
      margin: 0;
      padding: 20px;
    }
    
    h1 {
      text-align: center;
    }

    #unread-count {
      text-align: center;
      margin-bottom: 20px;
      font-size: 1.2em;
      color: #333;
    }
    
    #email-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .email-item {
      border-bottom: 1px solid #ddd;
      padding: 10px 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .email-item:last-child {
      border-bottom: none;
    }
    
    .email-details {
      flex: 1;
    }
    
    .email-sender {
      font-weight: bold;
      margin: 0;
    }

    .email-subject {
      font-weight: bold;
      margin: 0;
    }
    
    .email-preview {
      font-style: italic;
      color: #888;
      margin: 0;
    }
    
    .email-date {
      white-space: nowrap;
      margin-left: 10px;
    }

    .unread-tag {
      background-color: blue;
      color: white;
      padding: 2px 6px;
      border-radius: 3px;
      margin-left: 10px;
      font-size: 0.8em;
    }

    #linkWithMicrosoftButton {
      display: none; /* Hide the button by default */
    }

    #syncButton {
      display: block;
      margin: 0 auto 20px auto;
      padding: 10px 20px;
      font-size: 1em;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #syncButton:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
  <h1>Email List</h1>
  <button id="syncButton" onclick="syncNow()">Sync Now</button>
  <div id="unread-count"></div>
  <button id="linkWithMicrosoftButton" onclick="linkAccountWithMicrosoft()">Link with Microsoft</button>
  <ul id="email-list"></ul>

  <script src="script.js"></script>
  <script>
    const currentEmail = localStorage.getItem("email");
    const emailList = document.getElementById('email-list');
    const linkWithMicrosoftButton = document.getElementById('linkWithMicrosoftButton');
    const unreadCountElement = document.getElementById('unread-count');

    let linkedwithOutlook = false;
    // Fetch email data from the API endpoint
    fetch(`/email/get-mails/${currentEmail}`)
        .then(response => response.json())
        .then(emails => {
            linkedwithOutlook = emails.linkedwithOutlook;

            let unreadCount = 0;

            // Once data is fetched, create and display email items
            emails?.data?.forEach(email => {
                const item = createEmailItem(email);
                emailList.appendChild(item);

                // Increment unread count if the email is not read
                if (!email.isRead) {
                    unreadCount++;
                }
            });

            // Update the unread count display
            unreadCountElement.textContent = `Total Unread Emails: ${unreadCount}`;

            // Show or hide the button based on linkedwithOutlook value
            if (!linkedwithOutlook) {
                linkWithMicrosoftButton.style.display = 'block'; // Show the button
            } else {
                linkWithMicrosoftButton.style.display = 'none'; // Hide the button
            }
        })
        .catch(error => {
            console.error('Error fetching email data:', error);
        });

    function linkAccountWithMicrosoft() {
        window.location.href = "/auth";
    }

    function syncNow() {
      fetch(`/email/loadmoreemail`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email: currentEmail })
      })
      .then(() => {
        setTimeout(()=>{
          console.log("resload");
          window.location.reload();
        },3000)
  
      })
      .catch(error => {
        console.error('Error syncing emails:', error);
      });
    }

    function createEmailItem(email) {
        const item = document.createElement('li');
        item.classList.add('email-item');

        const details = document.createElement('div');
        details.classList.add('email-details');

        const sender = document.createElement('h3');
        sender.classList.add('email-sender');
        sender.textContent = email.sender;
        
        const subject = document.createElement('h3');
        subject.classList.add('email-subject');
        subject.textContent = email.subject;

        const preview = document.createElement('p');
        preview.classList.add('email-preview');
        preview.textContent = email.bodyPreview.split('\n')[0]; // Only display the first line

        details.appendChild(sender);
        details.appendChild(subject);
        details.appendChild(preview);

        const dateContainer = document.createElement('div');
        dateContainer.classList.add('email-date-container');

        const date = document.createElement('div');
        date.classList.add('email-date');
        date.textContent = new Date(email.createdDateTime).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });

        dateContainer.appendChild(date);

        // Add the unread tag if the email is not read
        if (!email.isRead) {
            const unreadTag = document.createElement('span');
            unreadTag.classList.add('unread-tag');
            unreadTag.textContent = 'Unread';
            dateContainer.appendChild(unreadTag);
        }

        item.appendChild(details);
        item.appendChild(dateContainer);

        return item;
    }
  </script>
</body>
</html>
